---
layout: post
title:  FP for mortals 读书笔记（8）
date:   2019-02-25 23:02:30 -0700
categories: [fpformortals]
---
# scalaz typeclass
## Plus
Plus is Semigroup but for type constructors, and PlusEmpty is the equivalent of Monoid. whereas IsEmpty is novel and allows us to query if an F\[A\] is empty
```scala
@typeclass trait Plus[F[_]] {
  @op("<+>") def plus[A](a: F[A], b: =>F[A]): F[A]
}
@typeclass trait PlusEmpty[F[_]] extends Plus[F] {
  def empty[A]: F[A]
}
@typeclass trait IsEmpty[F[_]] extends PlusEmpty[F] {
  def isEmpty[A](fa: F[A]): Boolean
}
```

it is best to think of it as operating only at the F\[_\] level, never looking into the contents. 
Plus has the convention that it should ignore failures and “pick the first winner”. 
<+> can therefore be used as a mechanism for early exit (losing information) and failure-handling via fallbacks

## Zip
```scala
@typeclass trait Zip[F[_]] {
  def zip[A, B](a: =>F[A], b: =>F[B]): F[(A, B)]
  def zipWith[A, B, C](fa: =>F[A], fb: =>F[B])(f: (A, B) => C)
  (implicit F: Functor[F]): F[C] = ...
  def ap(implicit F: Functor[F]): Apply[F] = ...
  @op("<*|*>") def apzip[A, B](f: =>F[A] => F[B], a: =>F[A]): F[(A, B)] = ...
}
```
an Apply\[F\] can be created from a Zip\[F\] and a Functor\[F\] by calling ap.

# typeclass cheatsheet
[Adam Rosien’s Scalaz Cheatsheet](http://arosien.github.io/scalaz-cheatsheets/typeclasses.pdf)

[Valentin Kasas explains how to combine N things](https://twitter.com/ValentinKasas/status/879414703340081156)

# Scalaz data types
## Type variance
Many of Scalaz’s data types are invariant in their type parameters.

### Covariance
The problem with covariant type parameters, such as class List\[+A\], is that List\[A\] is a subtype of List\[Any\] and it is easy to accidentally lose type information.

Similarly, when the compiler infers a type with Product with Serializable it is a strong indicator that accidental widening has occurred due to covariance.
### Contravariance
On the other hand, contravariant type parameters, such as trait Thing\[-A\], can expose devastating bugs in the compiler (Implicit resolution flips its definition of “most specific” for contravariant types).
### workaround on subtyping limitation
Scala defines infix classes <:< and =:= along with implicit evidence that always creates a witness
```scala
sealed abstract class <:<[-From, +To] extends (From => To)
implicit def conforms[A]: A <:< A = new <:<[A, A] { def apply(x: A): A = x }
sealed abstract class =:=[ From, To] extends (From => To)
implicit def tpEquals[A]: A =:= A = new =:=[A, A] { def apply(x: A): A = x }
```

+ <:< let us require that one type is a subclass the other.

+ =:= let us require that one is equal to the other.

### Scalaz improves on <:< and =:= with Liskov (aliased to <~<) and Leibniz (===)
```scala
sealed abstract class Liskov[-A, +B] {
  def apply(a: A): B = ...
  def subst[F[-_]](p: F[B]): F[A]
  def andThen[C](that: Liskov[B, C]): Liskov[A, C] = ...
  def onF[X](fa: X => A): X => B = ...
...
}
object Liskov {
  type <~<[-A, +B] = Liskov[A, B]
  type >~>[+B, -A] = Liskov[A, B]
  implicit def refl[A]: (A <~< A) = ...
  implicit def isa[A, B >: A]: A <~< B = ...
  implicit def witness[A, B](lt: A <~< B): A => B = ...
  ...
}
// type signatures have been simplified
sealed abstract class Leibniz[A, B] {
  def apply(a: A): B = ...
  def subst[F[_]](p: F[A]): F[B]
  def flip: Leibniz[B, A] = ...
  def andThen[C](that: Leibniz[B, C]): Leibniz[A, C] = ...
  def onF[X](fa: X => A): X => B = ...
  ...
}
object Leibniz {
  type ===[A, B] = Leibniz[A, B]
  implicit def refl[A]: Leibniz[A, A] = ...
  implicit def subst[A, B](a: A)(implicit f: A === B): B = ...
  implicit def witness[A, B](f: A === B): A => B = ...
  ...
}
```